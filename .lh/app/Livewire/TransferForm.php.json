{
    "sourceFile": "app/Livewire/TransferForm.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1719305884208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719306016586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,19 @@\n         'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n         'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n     ];\n \n-    \n+    protected $listeners = ['selectRoute' => 'fillForm'];\n \n+    public function fillForm($routeId)\n+    {\n+        $route = Route::find($routeId);\n+        if ($route) {\n+            $this->departure = $route->departure->id;\n+            $this->return = $route->arrival->id;\n+        }\n+    }\n+\n     public function updated($field)\n     {\n         $this->validateOnly($field);\n         if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n"
                },
                {
                    "date": 1719306419714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n     protected $listeners = ['selectRoute' => 'fillForm'];\n \n     public function fillForm($routeId)\n     {\n+        \n         $route = Route::find($routeId);\n         if ($route) {\n             $this->departure = $route->departure->id;\n             $this->return = $route->arrival->id;\n"
                },
                {
                    "date": 1719306425763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+<?php\n+\n+namespace App\\Livewire;\n+\n+use App\\Models\\Route;\n+use Livewire\\Component;\n+use App\\Models\\Destination;\n+\n+class TransferForm extends Component\n+{\n+    public $departure;\n+    public $return;\n+    public $transferPassengers = 1;\n+    public $transferPrice;\n+    public $solaAndata = true;\n+    public $andataRitorno = false;\n+    public $dateDeparture;\n+    public $dateReturn;\n+\n+    protected $rules = [\n+        'departure' => 'required|exists:destinations,id',\n+        'return' => 'required|exists:destinations,id',\n+        'transferPassengers' => 'required|integer|min:1|max:16',\n+        'dateDeparture' => 'required|date|after_or_equal:today',\n+        'dateReturn' => 'nullable|date|after:dateDeparture',\n+    ];\n+\n+    protected $messages = [\n+        'departure.required' => 'La partenza è obbligatoria.',\n+        'departure.exists' => 'La partenza selezionata non è valida.',\n+        'return.required' => 'La destinazione è obbligatoria.',\n+        'return.exists' => 'La destinazione selezionata non è valida.',\n+        'transferPassengers.required' => 'Il numero di passeggeri è obbligatorio.',\n+        'transferPassengers.integer' => 'Il numero di passeggeri deve essere un numero intero.',\n+        'transferPassengers.min' => 'Il numero minimo di passeggeri è 1.',\n+        'transferPassengers.max' => 'Il numero massimo di passeggeri è 16.',\n+        'dateDeparture.required' => 'La data di partenza è obbligatoria.',\n+        'dateDeparture.date' => 'La data di partenza deve essere una data valida.',\n+        'dateDeparture.after_or_equal' => 'La data di partenza non può essere nel passato.',\n+        'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n+        'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n+    ];\n+\n+    protected $listeners = ['selectRoute' => 'fillForm'];\n+\n+    public function fillForm($routeId)\n+    {\n+        dd($routeId)\n+        $route = Route::find($routeId);\n+        if ($route) {\n+            $this->departure = $route->departure->id;\n+            $this->return = $route->arrival->id;\n+        }\n+    }\n+\n+    public function updated($field)\n+    {\n+        $this->validateOnly($field);\n+        if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n+            $this->calculatePrice();\n+        }\n+    }\n+\n+    public function setSolaAndata()\n+    {\n+        $this->solaAndata = true;\n+        $this->andataRitorno = false;\n+        $this->dateReturn = null;\n+        $this->calculatePrice();\n+    }\n+\n+    public function setAndataRitorno()\n+    {\n+        $this->solaAndata = false;\n+        $this->andataRitorno = true;\n+        $this->calculatePrice();\n+    }\n+\n+    public function calculatePrice()\n+    {\n+        if ($this->departure && $this->return) {\n+            // Cerca la route basandosi su departure_id e arrival_id\n+            $route = Route::where('departure_id', $this->departure)\n+                ->where('arrival_id', $this->return)\n+                ->first();\n+\n+            if (!$route) {\n+                // Route non trovata\n+                $this->transferPrice = 0;\n+                return;\n+            }\n+\n+            $basePrice = $route->price;\n+            $incrementPrice = $route->price_increment;\n+            $passengers = $this->transferPassengers;\n+\n+            if ($passengers <= 4) {\n+                $totalPrice = $basePrice;\n+            } elseif ($passengers <= 8) {\n+                $totalPrice = $basePrice + $incrementPrice * ($passengers - 4);\n+            } elseif ($passengers >= 9 && $passengers <= 12) {\n+                $totalPrice = ($basePrice * 2) + $incrementPrice * 4;\n+            } elseif ($passengers > 12 || $passengers <= 16) {\n+                $totalPrice = ($basePrice * 2) + $incrementPrice * 4 + $incrementPrice * ($passengers - 12);\n+            }\n+\n+            if ($this->andataRitorno) {\n+                $totalPrice *= 2;\n+            }\n+\n+            $this->transferPrice = $totalPrice;\n+        } else {\n+            $this->transferPrice = 0;\n+        }\n+    }\n+\n+    public function getBookingDataTransfer()\n+    {\n+        return [\n+            'type' => 'transfer', // Assuming 'transfer' for transfer bookings\n+            'departure_id' => $this->departure,\n+            'arrival_id' => $this->return,\n+            'passengers' => $this->transferPassengers,\n+            'sola_andata' => $this->solaAndata,\n+            'date_dep' => $this->dateDeparture,\n+            'date_ret' => $this->dateReturn,\n+            'price' => $this->transferPrice,\n+        ];\n+    }\n+\n+    public function submitBookingTransfer()\n+    {\n+        $this->validate();\n+\n+        $bookingData = $this->getBookingDataTransfer();\n+        $departureName = Destination::find($bookingData['departure_id'])->name;\n+        $arrivalName = Destination::find($bookingData['arrival_id'])->name;\n+        $bookingData['departure_name'] = $departureName;\n+        $bookingData['arrival_name'] = $arrivalName;\n+        $route = Route::where('departure_id', $this->departure)->where('arrival_id', $this->return)->first();\n+       \n+        $bookingData['duration'] = $route->duration;\n+\n+        // Formattare la data di partenza\n+        $departureDate = date('D d F Y', strtotime($bookingData['date_dep']));\n+        $bookingData['date_departure'] = $departureDate;\n+        \n+        $departureTime = date('H:i', strtotime($bookingData['date_dep']));\n+        $bookingData['time_departure'] = $departureTime;\n+        \n+        // Se c'è una data di ritorno, formattarla\n+        if (!empty($bookingData['date_ret'])) {\n+\n+            $returnDate = date('D d F Y', strtotime($bookingData['date_ret']));\n+            $bookingData['date_return'] = $returnDate;\n+\n+            $returnTime = date('H:i', strtotime($bookingData['date_ret']));\n+            $bookingData['time_return'] = $returnTime;\n+        }\n+\n+        $this->dispatch('bookingSubmitted', $bookingData);\n+    }\n+\n+    public function render()\n+    {\n+        $destinations = Destination::all();\n+        $routes = Route::with(['departure', 'arrival'])->get();\n+        return view('livewire.transfer-form', compact('destinations', 'routes'));\n+    }\n+}\n"
                },
                {
                    "date": 1719306532790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     protected $listeners = ['selectRoute' => 'fillForm'];\n \n     public function fillForm($routeId)\n     {\n-        dd($routeId)\n+        dd();\n         $route = Route::find($routeId);\n         if ($route) {\n             $this->departure = $route->departure->id;\n             $this->return = $route->arrival->id;\n@@ -167,174 +167,4 @@\n         $routes = Route::with(['departure', 'arrival'])->get();\n         return view('livewire.transfer-form', compact('destinations', 'routes'));\n     }\n }\n-<?php\n-\n-namespace App\\Livewire;\n-\n-use App\\Models\\Route;\n-use Livewire\\Component;\n-use App\\Models\\Destination;\n-\n-class TransferForm extends Component\n-{\n-    public $departure;\n-    public $return;\n-    public $transferPassengers = 1;\n-    public $transferPrice;\n-    public $solaAndata = true;\n-    public $andataRitorno = false;\n-    public $dateDeparture;\n-    public $dateReturn;\n-\n-    protected $rules = [\n-        'departure' => 'required|exists:destinations,id',\n-        'return' => 'required|exists:destinations,id',\n-        'transferPassengers' => 'required|integer|min:1|max:16',\n-        'dateDeparture' => 'required|date|after_or_equal:today',\n-        'dateReturn' => 'nullable|date|after:dateDeparture',\n-    ];\n-\n-    protected $messages = [\n-        'departure.required' => 'La partenza è obbligatoria.',\n-        'departure.exists' => 'La partenza selezionata non è valida.',\n-        'return.required' => 'La destinazione è obbligatoria.',\n-        'return.exists' => 'La destinazione selezionata non è valida.',\n-        'transferPassengers.required' => 'Il numero di passeggeri è obbligatorio.',\n-        'transferPassengers.integer' => 'Il numero di passeggeri deve essere un numero intero.',\n-        'transferPassengers.min' => 'Il numero minimo di passeggeri è 1.',\n-        'transferPassengers.max' => 'Il numero massimo di passeggeri è 16.',\n-        'dateDeparture.required' => 'La data di partenza è obbligatoria.',\n-        'dateDeparture.date' => 'La data di partenza deve essere una data valida.',\n-        'dateDeparture.after_or_equal' => 'La data di partenza non può essere nel passato.',\n-        'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n-        'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n-    ];\n-\n-    protected $listeners = ['selectRoute' => 'fillForm'];\n-\n-    public function fillForm($routeId)\n-    {\n-        \n-        $route = Route::find($routeId);\n-        if ($route) {\n-            $this->departure = $route->departure->id;\n-            $this->return = $route->arrival->id;\n-        }\n-    }\n-\n-    public function updated($field)\n-    {\n-        $this->validateOnly($field);\n-        if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n-            $this->calculatePrice();\n-        }\n-    }\n-\n-    public function setSolaAndata()\n-    {\n-        $this->solaAndata = true;\n-        $this->andataRitorno = false;\n-        $this->dateReturn = null;\n-        $this->calculatePrice();\n-    }\n-\n-    public function setAndataRitorno()\n-    {\n-        $this->solaAndata = false;\n-        $this->andataRitorno = true;\n-        $this->calculatePrice();\n-    }\n-\n-    public function calculatePrice()\n-    {\n-        if ($this->departure && $this->return) {\n-            // Cerca la route basandosi su departure_id e arrival_id\n-            $route = Route::where('departure_id', $this->departure)\n-                ->where('arrival_id', $this->return)\n-                ->first();\n-\n-            if (!$route) {\n-                // Route non trovata\n-                $this->transferPrice = 0;\n-                return;\n-            }\n-\n-            $basePrice = $route->price;\n-            $incrementPrice = $route->price_increment;\n-            $passengers = $this->transferPassengers;\n-\n-            if ($passengers <= 4) {\n-                $totalPrice = $basePrice;\n-            } elseif ($passengers <= 8) {\n-                $totalPrice = $basePrice + $incrementPrice * ($passengers - 4);\n-            } elseif ($passengers >= 9 && $passengers <= 12) {\n-                $totalPrice = ($basePrice * 2) + $incrementPrice * 4;\n-            } elseif ($passengers > 12 || $passengers <= 16) {\n-                $totalPrice = ($basePrice * 2) + $incrementPrice * 4 + $incrementPrice * ($passengers - 12);\n-            }\n-\n-            if ($this->andataRitorno) {\n-                $totalPrice *= 2;\n-            }\n-\n-            $this->transferPrice = $totalPrice;\n-        } else {\n-            $this->transferPrice = 0;\n-        }\n-    }\n-\n-    public function getBookingDataTransfer()\n-    {\n-        return [\n-            'type' => 'transfer', // Assuming 'transfer' for transfer bookings\n-            'departure_id' => $this->departure,\n-            'arrival_id' => $this->return,\n-            'passengers' => $this->transferPassengers,\n-            'sola_andata' => $this->solaAndata,\n-            'date_dep' => $this->dateDeparture,\n-            'date_ret' => $this->dateReturn,\n-            'price' => $this->transferPrice,\n-        ];\n-    }\n-\n-    public function submitBookingTransfer()\n-    {\n-        $this->validate();\n-\n-        $bookingData = $this->getBookingDataTransfer();\n-        $departureName = Destination::find($bookingData['departure_id'])->name;\n-        $arrivalName = Destination::find($bookingData['arrival_id'])->name;\n-        $bookingData['departure_name'] = $departureName;\n-        $bookingData['arrival_name'] = $arrivalName;\n-        $route = Route::where('departure_id', $this->departure)->where('arrival_id', $this->return)->first();\n-       \n-        $bookingData['duration'] = $route->duration;\n-\n-        // Formattare la data di partenza\n-        $departureDate = date('D d F Y', strtotime($bookingData['date_dep']));\n-        $bookingData['date_departure'] = $departureDate;\n-        \n-        $departureTime = date('H:i', strtotime($bookingData['date_dep']));\n-        $bookingData['time_departure'] = $departureTime;\n-        \n-        // Se c'è una data di ritorno, formattarla\n-        if (!empty($bookingData['date_ret'])) {\n-\n-            $returnDate = date('D d F Y', strtotime($bookingData['date_ret']));\n-            $bookingData['date_return'] = $returnDate;\n-\n-            $returnTime = date('H:i', strtotime($bookingData['date_ret']));\n-            $bookingData['time_return'] = $returnTime;\n-        }\n-\n-        $this->dispatch('bookingSubmitted', $bookingData);\n-    }\n-\n-    public function render()\n-    {\n-        $destinations = Destination::all();\n-        $routes = Route::with(['departure', 'arrival'])->get();\n-        return view('livewire.transfer-form', compact('destinations', 'routes'));\n-    }\n-}\n"
                },
                {
                    "date": 1719306574751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     protected $listeners = ['selectRoute' => 'fillForm'];\n \n     public function fillForm($routeId)\n     {\n-        dd();\n+\n         $route = Route::find($routeId);\n         if ($route) {\n             $this->departure = $route->departure->id;\n             $this->return = $route->arrival->id;\n"
                },
                {
                    "date": 1719306664628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n \n     protected $listeners = ['selectRoute' => 'fillForm'];\n \n     public function fillForm($routeId)\n-    {\n-\n+    {   \n+        \n         $route = Route::find($routeId);\n         if ($route) {\n             $this->departure = $route->departure->id;\n             $this->return = $route->arrival->id;\n"
                },
                {
                    "date": 1719306694210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,13 @@\n         'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n         'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n     ];\n \n-    protected $listeners = ['selectRoute' => 'fillForm'];\n+    // protected $listeners = ['selectRoute' => 'fillForm'];\n \n     public function fillForm($routeId)\n-    {   \n-        \n+    {\n+        dd('ciao');\n         $route = Route::find($routeId);\n         if ($route) {\n             $this->departure = $route->departure->id;\n             $this->return = $route->arrival->id;\n"
                },
                {
                    "date": 1719306834275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,20 +40,9 @@\n         'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n         'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n     ];\n \n-    // protected $listeners = ['selectRoute' => 'fillForm'];\n \n-    public function fillForm($routeId)\n-    {\n-        dd('ciao');\n-        $route = Route::find($routeId);\n-        if ($route) {\n-            $this->departure = $route->departure->id;\n-            $this->return = $route->arrival->id;\n-        }\n-    }\n-\n     public function updated($field)\n     {\n         $this->validateOnly($field);\n         if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n"
                },
                {
                    "date": 1719307898985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             if ($this->andataRitorno) {\n                 $totalPrice *= 2;\n             }\n \n-            $this->transferPrice = $totalPrice;\n+            $this->transferPrice = $totalPrice + ;\n         } else {\n             $this->transferPrice = 0;\n         }\n     }\n"
                },
                {
                    "date": 1719307927734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             if ($this->andataRitorno) {\n                 $totalPrice *= 2;\n             }\n \n-            $this->transferPrice = $totalPrice + ;\n+            $this->transferPrice = $totalPrice + \"€';\n         } else {\n             $this->transferPrice = 0;\n         }\n     }\n"
                },
                {
                    "date": 1719307941637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             if ($this->andataRitorno) {\n                 $totalPrice *= 2;\n             }\n \n-            $this->transferPrice = $totalPrice + \"€';\n+            $this->transferPrice = $totalPrice \"€\";\n         } else {\n             $this->transferPrice = 0;\n         }\n     }\n"
                },
                {
                    "date": 1719307951906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+<?php\n+\n+namespace App\\Livewire;\n+\n+use App\\Models\\Route;\n+use Livewire\\Component;\n+use App\\Models\\Destination;\n+\n+class TransferForm extends Component\n+{\n+    public $departure;\n+    public $return;\n+    public $transferPassengers = 1;\n+    public $transferPrice;\n+    public $solaAndata = true;\n+    public $andataRitorno = false;\n+    public $dateDeparture;\n+    public $dateReturn;\n+\n+    protected $rules = [\n+        'departure' => 'required|exists:destinations,id',\n+        'return' => 'required|exists:destinations,id',\n+        'transferPassengers' => 'required|integer|min:1|max:16',\n+        'dateDeparture' => 'required|date|after_or_equal:today',\n+        'dateReturn' => 'nullable|date|after:dateDeparture',\n+    ];\n+\n+    protected $messages = [\n+        'departure.required' => 'La partenza è obbligatoria.',\n+        'departure.exists' => 'La partenza selezionata non è valida.',\n+        'return.required' => 'La destinazione è obbligatoria.',\n+        'return.exists' => 'La destinazione selezionata non è valida.',\n+        'transferPassengers.required' => 'Il numero di passeggeri è obbligatorio.',\n+        'transferPassengers.integer' => 'Il numero di passeggeri deve essere un numero intero.',\n+        'transferPassengers.min' => 'Il numero minimo di passeggeri è 1.',\n+        'transferPassengers.max' => 'Il numero massimo di passeggeri è 16.',\n+        'dateDeparture.required' => 'La data di partenza è obbligatoria.',\n+        'dateDeparture.date' => 'La data di partenza deve essere una data valida.',\n+        'dateDeparture.after_or_equal' => 'La data di partenza non può essere nel passato.',\n+        'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n+        'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n+    ];\n+\n+\n+    public function updated($field)\n+    {\n+        $this->validateOnly($field);\n+        if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n+            $this->calculatePrice();\n+        }\n+    }\n+\n+    public function setSolaAndata()\n+    {\n+        $this->solaAndata = true;\n+        $this->andataRitorno = false;\n+        $this->dateReturn = null;\n+        $this->calculatePrice();\n+    }\n+\n+    public function setAndataRitorno()\n+    {\n+        $this->solaAndata = false;\n+        $this->andataRitorno = true;\n+        $this->calculatePrice();\n+    }\n+\n+    public function calculatePrice()\n+    {\n+        if ($this->departure && $this->return) {\n+            // Cerca la route basandosi su departure_id e arrival_id\n+            $route = Route::where('departure_id', $this->departure)\n+                ->where('arrival_id', $this->return)\n+                ->first();\n+\n+            if (!$route) {\n+                // Route non trovata\n+                $this->transferPrice = 0;\n+                return;\n+            }\n+\n+            $basePrice = $route->price;\n+            $incrementPrice = $route->price_increment;\n+            $passengers = $this->transferPassengers;\n+\n+            if ($passengers <= 4) {\n+                $totalPrice = $basePrice;\n+            } elseif ($passengers <= 8) {\n+                $totalPrice = $basePrice + $incrementPrice * ($passengers - 4);\n+            } elseif ($passengers >= 9 && $passengers <= 12) {\n+                $totalPrice = ($basePrice * 2) + $incrementPrice * 4;\n+            } elseif ($passengers > 12 || $passengers <= 16) {\n+                $totalPrice = ($basePrice * 2) + $incrementPrice * 4 + $incrementPrice * ($passengers - 12);\n+            }\n+\n+            if ($this->andataRitorno) {\n+                $totalPrice *= 2;\n+            }\n+\n+            $this->transferPrice = $totalPric \"€\";\n+        } else {\n+            $this->transferPrice = 0;\n+        }\n+    }\n+\n+    public function getBookingDataTransfer()\n+    {\n+        return [\n+            'type' => 'transfer', // Assuming 'transfer' for transfer bookings\n+            'departure_id' => $this->departure,\n+            'arrival_id' => $this->return,\n+            'passengers' => $this->transferPassengers,\n+            'sola_andata' => $this->solaAndata,\n+            'date_dep' => $this->dateDeparture,\n+            'date_ret' => $this->dateReturn,\n+            'price' => $this->transferPrice,\n+        ];\n+    }\n+\n+    public function submitBookingTransfer()\n+    {\n+        $this->validate();\n+\n+        $bookingData = $this->getBookingDataTransfer();\n+        $departureName = Destination::find($bookingData['departure_id'])->name;\n+        $arrivalName = Destination::find($bookingData['arrival_id'])->name;\n+        $bookingData['departure_name'] = $departureName;\n+        $bookingData['arrival_name'] = $arrivalName;\n+        $route = Route::where('departure_id', $this->departure)->where('arrival_id', $this->return)->first();\n+       \n+        $bookingData['duration'] = $route->duration;\n+\n+        // Formattare la data di partenza\n+        $departureDate = date('D d F Y', strtotime($bookingData['date_dep']));\n+        $bookingData['date_departure'] = $departureDate;\n+        \n+        $departureTime = date('H:i', strtotime($bookingData['date_dep']));\n+        $bookingData['time_departure'] = $departureTime;\n+        \n+        // Se c'è una data di ritorno, formattarla\n+        if (!empty($bookingData['date_ret'])) {\n+\n+            $returnDate = date('D d F Y', strtotime($bookingData['date_ret']));\n+            $bookingData['date_return'] = $returnDate;\n+\n+            $returnTime = date('H:i', strtotime($bookingData['date_ret']));\n+            $bookingData['time_return'] = $returnTime;\n+        }\n+\n+        $this->dispatch('bookingSubmitted', $bookingData);\n+    }\n+\n+    public function render()\n+    {\n+        $destinations = Destination::all();\n+        $routes = Route::with(['departure', 'arrival'])->get();\n+        return view('livewire.transfer-form', compact('destinations', 'routes'));\n+    }\n+}\n"
                },
                {
                    "date": 1719307960391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             if ($this->andataRitorno) {\n                 $totalPrice *= 2;\n             }\n \n-            $this->transferPrice = $totalPric \"€\";\n+            $this->transferPrice = $totalPrice + ()\"€\";\n         } else {\n             $this->transferPrice = 0;\n         }\n     }\n@@ -156,163 +156,4 @@\n         $routes = Route::with(['departure', 'arrival'])->get();\n         return view('livewire.transfer-form', compact('destinations', 'routes'));\n     }\n }\n-<?php\n-\n-namespace App\\Livewire;\n-\n-use App\\Models\\Route;\n-use Livewire\\Component;\n-use App\\Models\\Destination;\n-\n-class TransferForm extends Component\n-{\n-    public $departure;\n-    public $return;\n-    public $transferPassengers = 1;\n-    public $transferPrice;\n-    public $solaAndata = true;\n-    public $andataRitorno = false;\n-    public $dateDeparture;\n-    public $dateReturn;\n-\n-    protected $rules = [\n-        'departure' => 'required|exists:destinations,id',\n-        'return' => 'required|exists:destinations,id',\n-        'transferPassengers' => 'required|integer|min:1|max:16',\n-        'dateDeparture' => 'required|date|after_or_equal:today',\n-        'dateReturn' => 'nullable|date|after:dateDeparture',\n-    ];\n-\n-    protected $messages = [\n-        'departure.required' => 'La partenza è obbligatoria.',\n-        'departure.exists' => 'La partenza selezionata non è valida.',\n-        'return.required' => 'La destinazione è obbligatoria.',\n-        'return.exists' => 'La destinazione selezionata non è valida.',\n-        'transferPassengers.required' => 'Il numero di passeggeri è obbligatorio.',\n-        'transferPassengers.integer' => 'Il numero di passeggeri deve essere un numero intero.',\n-        'transferPassengers.min' => 'Il numero minimo di passeggeri è 1.',\n-        'transferPassengers.max' => 'Il numero massimo di passeggeri è 16.',\n-        'dateDeparture.required' => 'La data di partenza è obbligatoria.',\n-        'dateDeparture.date' => 'La data di partenza deve essere una data valida.',\n-        'dateDeparture.after_or_equal' => 'La data di partenza non può essere nel passato.',\n-        'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n-        'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n-    ];\n-\n-\n-    public function updated($field)\n-    {\n-        $this->validateOnly($field);\n-        if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n-            $this->calculatePrice();\n-        }\n-    }\n-\n-    public function setSolaAndata()\n-    {\n-        $this->solaAndata = true;\n-        $this->andataRitorno = false;\n-        $this->dateReturn = null;\n-        $this->calculatePrice();\n-    }\n-\n-    public function setAndataRitorno()\n-    {\n-        $this->solaAndata = false;\n-        $this->andataRitorno = true;\n-        $this->calculatePrice();\n-    }\n-\n-    public function calculatePrice()\n-    {\n-        if ($this->departure && $this->return) {\n-            // Cerca la route basandosi su departure_id e arrival_id\n-            $route = Route::where('departure_id', $this->departure)\n-                ->where('arrival_id', $this->return)\n-                ->first();\n-\n-            if (!$route) {\n-                // Route non trovata\n-                $this->transferPrice = 0;\n-                return;\n-            }\n-\n-            $basePrice = $route->price;\n-            $incrementPrice = $route->price_increment;\n-            $passengers = $this->transferPassengers;\n-\n-            if ($passengers <= 4) {\n-                $totalPrice = $basePrice;\n-            } elseif ($passengers <= 8) {\n-                $totalPrice = $basePrice + $incrementPrice * ($passengers - 4);\n-            } elseif ($passengers >= 9 && $passengers <= 12) {\n-                $totalPrice = ($basePrice * 2) + $incrementPrice * 4;\n-            } elseif ($passengers > 12 || $passengers <= 16) {\n-                $totalPrice = ($basePrice * 2) + $incrementPrice * 4 + $incrementPrice * ($passengers - 12);\n-            }\n-\n-            if ($this->andataRitorno) {\n-                $totalPrice *= 2;\n-            }\n-\n-            $this->transferPrice = $totalPrice \"€\";\n-        } else {\n-            $this->transferPrice = 0;\n-        }\n-    }\n-\n-    public function getBookingDataTransfer()\n-    {\n-        return [\n-            'type' => 'transfer', // Assuming 'transfer' for transfer bookings\n-            'departure_id' => $this->departure,\n-            'arrival_id' => $this->return,\n-            'passengers' => $this->transferPassengers,\n-            'sola_andata' => $this->solaAndata,\n-            'date_dep' => $this->dateDeparture,\n-            'date_ret' => $this->dateReturn,\n-            'price' => $this->transferPrice,\n-        ];\n-    }\n-\n-    public function submitBookingTransfer()\n-    {\n-        $this->validate();\n-\n-        $bookingData = $this->getBookingDataTransfer();\n-        $departureName = Destination::find($bookingData['departure_id'])->name;\n-        $arrivalName = Destination::find($bookingData['arrival_id'])->name;\n-        $bookingData['departure_name'] = $departureName;\n-        $bookingData['arrival_name'] = $arrivalName;\n-        $route = Route::where('departure_id', $this->departure)->where('arrival_id', $this->return)->first();\n-       \n-        $bookingData['duration'] = $route->duration;\n-\n-        // Formattare la data di partenza\n-        $departureDate = date('D d F Y', strtotime($bookingData['date_dep']));\n-        $bookingData['date_departure'] = $departureDate;\n-        \n-        $departureTime = date('H:i', strtotime($bookingData['date_dep']));\n-        $bookingData['time_departure'] = $departureTime;\n-        \n-        // Se c'è una data di ritorno, formattarla\n-        if (!empty($bookingData['date_ret'])) {\n-\n-            $returnDate = date('D d F Y', strtotime($bookingData['date_ret']));\n-            $bookingData['date_return'] = $returnDate;\n-\n-            $returnTime = date('H:i', strtotime($bookingData['date_ret']));\n-            $bookingData['time_return'] = $returnTime;\n-        }\n-\n-        $this->dispatch('bookingSubmitted', $bookingData);\n-    }\n-\n-    public function render()\n-    {\n-        $destinations = Destination::all();\n-        $routes = Route::with(['departure', 'arrival'])->get();\n-        return view('livewire.transfer-form', compact('destinations', 'routes'));\n-    }\n-}\n"
                },
                {
                    "date": 1719307965782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             if ($this->andataRitorno) {\n                 $totalPrice *= 2;\n             }\n \n-            $this->transferPrice = $totalPrice + ()\"€\";\n+            $this->transferPrice = $totalPrice;\n         } else {\n             $this->transferPrice = 0;\n         }\n     }\n"
                }
            ],
            "date": 1719305884208,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Livewire;\n\nuse App\\Models\\Route;\nuse Livewire\\Component;\nuse App\\Models\\Destination;\n\nclass TransferForm extends Component\n{\n    public $departure;\n    public $return;\n    public $transferPassengers = 1;\n    public $transferPrice;\n    public $solaAndata = true;\n    public $andataRitorno = false;\n    public $dateDeparture;\n    public $dateReturn;\n\n    protected $rules = [\n        'departure' => 'required|exists:destinations,id',\n        'return' => 'required|exists:destinations,id',\n        'transferPassengers' => 'required|integer|min:1|max:16',\n        'dateDeparture' => 'required|date|after_or_equal:today',\n        'dateReturn' => 'nullable|date|after:dateDeparture',\n    ];\n\n    protected $messages = [\n        'departure.required' => 'La partenza è obbligatoria.',\n        'departure.exists' => 'La partenza selezionata non è valida.',\n        'return.required' => 'La destinazione è obbligatoria.',\n        'return.exists' => 'La destinazione selezionata non è valida.',\n        'transferPassengers.required' => 'Il numero di passeggeri è obbligatorio.',\n        'transferPassengers.integer' => 'Il numero di passeggeri deve essere un numero intero.',\n        'transferPassengers.min' => 'Il numero minimo di passeggeri è 1.',\n        'transferPassengers.max' => 'Il numero massimo di passeggeri è 16.',\n        'dateDeparture.required' => 'La data di partenza è obbligatoria.',\n        'dateDeparture.date' => 'La data di partenza deve essere una data valida.',\n        'dateDeparture.after_or_equal' => 'La data di partenza non può essere nel passato.',\n        'dateReturn.date' => 'La data di ritorno deve essere una data valida.',\n        'dateReturn.after' => 'La data di ritorno deve essere dopo la data di partenza.',\n    ];\n\n    \n\n    public function updated($field)\n    {\n        $this->validateOnly($field);\n        if ($field === 'departure' || $field === 'return' || $field === 'transferPassengers' || $field === 'solaAndata' || $field === 'andataRitorno') {\n            $this->calculatePrice();\n        }\n    }\n\n    public function setSolaAndata()\n    {\n        $this->solaAndata = true;\n        $this->andataRitorno = false;\n        $this->dateReturn = null;\n        $this->calculatePrice();\n    }\n\n    public function setAndataRitorno()\n    {\n        $this->solaAndata = false;\n        $this->andataRitorno = true;\n        $this->calculatePrice();\n    }\n\n    public function calculatePrice()\n    {\n        if ($this->departure && $this->return) {\n            // Cerca la route basandosi su departure_id e arrival_id\n            $route = Route::where('departure_id', $this->departure)\n                ->where('arrival_id', $this->return)\n                ->first();\n\n            if (!$route) {\n                // Route non trovata\n                $this->transferPrice = 0;\n                return;\n            }\n\n            $basePrice = $route->price;\n            $incrementPrice = $route->price_increment;\n            $passengers = $this->transferPassengers;\n\n            if ($passengers <= 4) {\n                $totalPrice = $basePrice;\n            } elseif ($passengers <= 8) {\n                $totalPrice = $basePrice + $incrementPrice * ($passengers - 4);\n            } elseif ($passengers >= 9 && $passengers <= 12) {\n                $totalPrice = ($basePrice * 2) + $incrementPrice * 4;\n            } elseif ($passengers > 12 || $passengers <= 16) {\n                $totalPrice = ($basePrice * 2) + $incrementPrice * 4 + $incrementPrice * ($passengers - 12);\n            }\n\n            if ($this->andataRitorno) {\n                $totalPrice *= 2;\n            }\n\n            $this->transferPrice = $totalPrice;\n        } else {\n            $this->transferPrice = 0;\n        }\n    }\n\n    public function getBookingDataTransfer()\n    {\n        return [\n            'type' => 'transfer', // Assuming 'transfer' for transfer bookings\n            'departure_id' => $this->departure,\n            'arrival_id' => $this->return,\n            'passengers' => $this->transferPassengers,\n            'sola_andata' => $this->solaAndata,\n            'date_dep' => $this->dateDeparture,\n            'date_ret' => $this->dateReturn,\n            'price' => $this->transferPrice,\n        ];\n    }\n\n    public function submitBookingTransfer()\n    {\n        $this->validate();\n\n        $bookingData = $this->getBookingDataTransfer();\n        $departureName = Destination::find($bookingData['departure_id'])->name;\n        $arrivalName = Destination::find($bookingData['arrival_id'])->name;\n        $bookingData['departure_name'] = $departureName;\n        $bookingData['arrival_name'] = $arrivalName;\n        $route = Route::where('departure_id', $this->departure)->where('arrival_id', $this->return)->first();\n       \n        $bookingData['duration'] = $route->duration;\n\n        // Formattare la data di partenza\n        $departureDate = date('D d F Y', strtotime($bookingData['date_dep']));\n        $bookingData['date_departure'] = $departureDate;\n        \n        $departureTime = date('H:i', strtotime($bookingData['date_dep']));\n        $bookingData['time_departure'] = $departureTime;\n        \n        // Se c'è una data di ritorno, formattarla\n        if (!empty($bookingData['date_ret'])) {\n\n            $returnDate = date('D d F Y', strtotime($bookingData['date_ret']));\n            $bookingData['date_return'] = $returnDate;\n\n            $returnTime = date('H:i', strtotime($bookingData['date_ret']));\n            $bookingData['time_return'] = $returnTime;\n        }\n\n        $this->dispatch('bookingSubmitted', $bookingData);\n    }\n\n    public function render()\n    {\n        $destinations = Destination::all();\n        $routes = Route::with(['departure', 'arrival'])->get();\n        return view('livewire.transfer-form', compact('destinations', 'routes'));\n    }\n}\n"
        }
    ]
}